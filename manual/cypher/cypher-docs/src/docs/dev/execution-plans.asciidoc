[[execution-plans]]
= Execution Plans =

[abstract]
--
This section describes operators used as part of an execution plan to execute a query in the Cypher query language.
--

Neo4j breaks down the work of executing a query into small pieces called operators.
Each operator is responsible for a small part of the overall query.
The operators are connected together in a pattern called a execution plan.

Each operator is annotated with statistics.

`Rows`::
The number of rows that the operator produced. Only available if the query was profiled.
`EstimatedRows`::
If Neo4j used the cost-based compiler you will see the estimated number of rows that will be produced by the operator.
The compiler uses this estimate to choose a suitable execution plan.
`DbHits`::
Each operator will ask the Neo4j storage engine to do work such as retrieving or updating data.
A _database hit_ is an abstract unit of this storage engine work.

See <<how-do-i-profile-a-query>> for how to view the execution plan for your query.

For a deeper understanding of how each operator works, see the relevant section.
Operators are grouped into high-level categories.
Please remember that the statistics of the actual database where the queries run on will decide the plan used.
There is no guarantee that a specific query will always be solved with the same plan.

* <<execution-plans-starting-operators,Starting point operators>>
* <<execution-plans-expand-operators,Expand operators>>
* <<combining-operators,Combining operators>>
* <<execution-plans-row-operators,Row operators>>
* <<execution-plans-update-operators,Update operators>>
* <<query-shortestpath-planning,Shortest path planning>>

// The conditional leveloffsets below are "wrong" for the neo4j/neo4j
// Asciidoc+DB45 docs build, but AsciiDoc is limited to a certain depth so it
// is not possible to set them correctly. The downstream docs build is happy
// with these values.

ifndef::asciidoctor[:leveloffset: 1]

include::execution-plan-groups/starting-query.asciidoc[leveloffset=+1]

ifndef::asciidoctor[:leveloffset: 1]

include::execution-plan-groups/expand.asciidoc[leveloffset=+1]

ifndef::asciidoctor[:leveloffset: 2]

include::execution-plan-groups/combining-operators.adoc[leveloffset=+1]

ifndef::asciidoctor[:leveloffset: 1]

include::execution-plan-groups/row.asciidoc[leveloffset=+1]

ifndef::asciidoctor[:leveloffset: 1]

include::execution-plan-groups/update.asciidoc[leveloffset=+1]

ifndef::asciidoctor[:leveloffset: 2]

include::execution-plan-groups/query-shortestpath-planning.adoc[leveloffset=+1]

