[[query-where]]
= WHERE

[abstract]
`WHERE` adds constraints to the patterns in a `MATCH` or `OPTIONAL MATCH` clause or filters the results of a `WITH` clause.

`WHERE` is not a clause in its own right -- rather, it's part of `MATCH`, `OPTIONAL MATCH`, `START` and `WITH`.

In the case of `WITH` and `START`, `WHERE` simply filters the results.

For `MATCH` and `OPTIONAL MATCH` on the other hand, `WHERE` adds constraints to the patterns described.
_It should not be seen as a filter after the matching is finished._

[IMPORTANT]
In the case of multiple `MATCH` / `OPTIONAL MATCH` clauses, the predicate in `WHERE` is always a part of the patterns in the directly preceding `MATCH` / `OPTIONAL MATCH`.
Both results and performance may be impacted if the `WHERE` is put inside the wrong `MATCH` clause.

.Graph
include::includes/cypher-where-graph.asciidoc[]

== Basic usage ==

ifndef::asciidoctor[:leveloffset: 3]

include::boolean-operations.asciidoc[leveloffset=+1]

include::filter-on-node-label.asciidoc[leveloffset=+1]

include::filter-on-node-property.asciidoc[leveloffset=+1]

include::filter-on-relationship-property.asciidoc[leveloffset=+1]

include::filter-on-dynamic-node-property.asciidoc[leveloffset=+1]

include::property-exists.asciidoc[leveloffset=+1]

ifndef::asciidoctor[:leveloffset: 2]

[[query-where-string]]
== String matching ==

The start and end of strings can be matched using `STARTS WITH` and `ENDS WITH`.
To match regardless of location in a string, use `CONTAINS`.
The matching is _case-sensitive_.

ifndef::asciidoctor[:leveloffset: 3]

include::match-the-start-of-a-string.asciidoc[leveloffset=+1]

include::match-the-end-of-a-string.asciidoc[leveloffset=+1]

include::match-anywhere-in-a-string.asciidoc[leveloffset=+1]

include::string-matching-negation.asciidoc[leveloffset=+1]

ifndef::asciidoctor[:leveloffset: 2]

[[query-where-regex]]
== Regular expressions ==

Cypher supports filtering using regular expressions.
The regular expression syntax is inherited from https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html[the Java regular expressions].
This includes support for flags that change how strings are matched, including case-insensitive `(?i)`, multiline `(?m)` and dotall `(?s)`.
Flags are given at the start of the regular expression, for example `MATCH (n) WHERE n.name =~ '(?i)Lon.*' RETURN n` will return nodes with name `London` or with name `LonDoN`.

ifndef::asciidoctor[:leveloffset: 3]

include::regular-expressions.asciidoc[leveloffset=+1]

include::escaping-in-regular-expressions.asciidoc[leveloffset=+1]

include::case-insensitive-regular-expressions.asciidoc[leveloffset=+1]



ifndef::asciidoctor[:leveloffset: 2]

[[query-where-patterns]]
== Using path patterns in WHERE ==

ifndef::asciidoctor[:leveloffset: 3]

include::filter-on-patterns.asciidoc[leveloffset=+1]

include::filter-on-patterns-using-not.asciidoc[leveloffset=+1]

include::filter-on-patterns-with-properties.asciidoc[leveloffset=+1]

include::filtering-on-relationship-type.asciidoc[leveloffset=+1]

ifndef::asciidoctor[:leveloffset: 2]

== Lists ==

ifndef::asciidoctor[:leveloffset: 3]

include::in-operator.asciidoc[leveloffset=+1]

ifndef::asciidoctor[:leveloffset: 2]

== Missing properties and values ==

ifndef::asciidoctor[:leveloffset: 3]

include::default-to-false-if-property-is-missing.asciidoc[leveloffset=+1]

include::default-to-true-if-property-is-missing.asciidoc[leveloffset=+1]

include::filter-on-null.asciidoc[leveloffset=+1]

ifndef::asciidoctor[:leveloffset: 2]

== Using ranges ==

ifndef::asciidoctor[:leveloffset: 3]

include::simple-range.asciidoc[leveloffset=+1]

include::composite-range.asciidoc[leveloffset=+1]


